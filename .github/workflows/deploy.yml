name: Build and Deploy Modern Portfolio

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Build daily to keep dependencies fresh
    - cron: '0 2 * * *'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job with modern optimizations
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          cache-version: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node dependencies
        run: |
          npm install -g terser postcss-cli autoprefixer cssnano
          npm install workbox-cli

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        run: |
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Optimize CSS
        run: |
          find _site -name "*.css" -exec postcss {} --use autoprefixer --use cssnano --replace \;

      - name: Optimize JavaScript
        run: |
          find _site -name "*.js" -exec terser {} --output {} --compress --mangle \;

      - name: Generate Service Worker
        run: |
          npx workbox generateSW workbox-config.js

      - name: Optimize Images
        run: |
          # Install imagemin if images need optimization
          echo "Image optimization would go here"

      - name: Security Headers
        run: |
          # Add security headers to HTML files
          find _site -name "*.html" -exec sed -i '/<head>/a\
          <meta http-equiv="Content-Security-Policy" content="default-src '\''self'\''; script-src '\''self'\'' '\''unsafe-inline'\'' https:; style-src '\''self'\'' '\''unsafe-inline'\'' https: fonts.googleapis.com; font-src '\''self'\'' https: fonts.gstatic.com; img-src '\''self'\'' https: data:; connect-src '\''self'\'' https:;">\
          <meta http-equiv="X-Content-Type-Options" content="nosniff">\
          <meta http-equiv="X-Frame-Options" content="DENY">\
          <meta http-equiv="X-XSS-Protection" content="1; mode=block">' {} \;

      - name: Performance Audit
        run: |
          # Install Lighthouse CI
          npm install -g @lhci/cli
          # Note: Full audit would run here in a real deployment

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Lighthouse CI job for performance monitoring
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          lhci collect --url=https://${{ github.repository_owner }}.github.io
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # SEO and Link Checker
  seo-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: SEO & Link Check
        run: |
          # Install tools
          npm install -g broken-link-checker
          
          # Check for broken links
          echo "Checking for broken links..."
          blc https://${{ github.repository_owner }}.github.io --recursive --ordered
        continue-on-error: true

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
